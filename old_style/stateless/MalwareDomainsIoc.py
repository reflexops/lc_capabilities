# Copyright 2017 Google, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
# Metadata
'''
LC_DETECTION_MTD_START
{
    "type" : "stateless",
    "description" : "MalwareDomains.com IOC detection.",
    "requirements" : "",
    "feeds" : [ "notification.DNS_REQUEST" ],
    "platform" : "common",
    "author" : "maximelb@google.com",
    "version" : "1.0",
    "scaling_factor" : 1000,
    "n_concurrent" : 5,
    "usage" : {}
}
LC_DETECTION_MTD_END
'''
###############################################################################

from beach.actor import Actor
StatelessActor = Actor.importLib( 'Detects', 'StatelessActor' )
_x_ = Actor.importLib( 'utils/hcp_helpers', '_x_' )
import urllib2
from prefixtree import PrefixDict
from zipfile import ZipFile
from StringIO import StringIO

class MalwareDomainsIoc ( StatelessActor ):
    def init( self, parameters, resources ):
        super( MalwareDomainsIoc, self ).init( parameters, resources )

        self.mdActor = self.getActorHandle( 'analytics/malwaredomains' )
        self.lookup = {}

        self.refreshDomains()

    def refreshDomains( self ):
        info = self.mdActor.request( 'get_list' )
        if info.isSuccess:
            self.lookup = info.data[ 'domains' ]
        self.log( "%d domains refreshed" % len( self.lookup ) )

        self.delay( 60 * 60 * 24, self.refreshDomains )

    def process( self, detects, msg ):
        routing, event, mtd = msg.data
        
        domain = _x_( event, '?/base.DOMAIN_NAME' )
        if domain is not None:
            match = self.lookup.get( domain, None )
            if match is not None:
                event[ 'ioc' ] = match
                detects.add( 50, 'malwaredomains.com IOC detected', event )
        